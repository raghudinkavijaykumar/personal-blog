{"componentChunkName":"component---src-templates-blog-post-template-tsx","path":"/javascript/","result":{"data":{"mdx":{"frontmatter":{"title":"Javascript","date":"2021 January 19th"},"tableOfContents":{"items":[{"url":"#reading-the-document","title":"Reading the document"},{"url":"#important-links","title":"Important Links"},{"url":"#major-reference","title":"Major Reference"},{"url":"#console","title":"Console","items":[{"url":"#consolelog","title":"console.log()","items":[{"url":"#getting-started","title":"Getting Started"},{"url":"#logging-variables","title":"Logging variables"},{"url":"#placeholders","title":"Placeholders"},{"url":"#logging-objects","title":"Logging Objects"},{"url":"#logging-html-elements","title":"Logging HTML elements"}]}]},{"url":"#using-the-dom-api","title":"Using the DOM API"},{"url":"#window","title":"Window","items":[{"url":"#alert","title":"Alert"},{"url":"#prompt","title":"Prompt"},{"url":"#confirm","title":"Confirm"}]},{"url":"#javascript-variables","title":"JavaScript Variables","items":[{"url":"#types-of-variables","title":"Types of Variables"},{"url":"#arrays-and-objects","title":"Arrays and Objects"}]},{"url":"#built-in-constants","title":"Built-in Constants","items":[{"url":"#null","title":"null"},{"url":"#nan","title":"Nan","items":[{"url":"#testing-for-nan-using-isnan","title":"Testing for NaN using isNaN()"},{"url":"#operations-that-return-nan","title":"Operations that return NaN"}]},{"url":"#undefined-and-null","title":"undefined and null"},{"url":"#infinity-and--infinity","title":"Infinity and -Infinity"},{"url":"#number-constants","title":"Number constants"}]},{"url":"#comments","title":"Comments"}]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Javascript\",\n  \"date\": \"2021-01-19T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    style: {\n      \"fontSize\": \"30px\"\n    }\n  }, \"Javascript\"), mdx(\"h1\", null, \"Contents\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#reading-the-document\"\n  }), \"Reading the document\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#important-links\"\n  }), \"Important Links\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#major-reference\"\n  }), \"Major Reference\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#console\"\n  }), \"Console\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#consolelog\"\n  }), \"console.log()\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#getting-started\"\n  }), \"Getting Started\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#logging-variables\"\n  }), \"Logging variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#placeholders\"\n  }), \"Placeholders\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#logging-objects\"\n  }), \"Logging Objects\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#logging-html-elements\"\n  }), \"Logging HTML elements\")))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#using-the-dom-api\"\n  }), \"Using the DOM API\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#window\"\n  }), \"Window\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#alert\"\n  }), \"Alert\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#prompt\"\n  }), \"Prompt\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#confirm\"\n  }), \"Confirm\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#javascript-variables\"\n  }), \"JavaScript Variables\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#types-of-variables\"\n  }), \"Types of Variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#arrays-and-objects\"\n  }), \"Arrays and Objects\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#built-in-constants\"\n  }), \"Built-in Constants\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#null\"\n  }), \"null\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#nan\"\n  }), \"Nan\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#testing-for-nan-using-isnan\"\n  }), \"Testing for NaN using isNaN()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#operations-that-return-nan\"\n  }), \"Operations that return NaN\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#undefined-and-null\"\n  }), \"undefined and null\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#infinity-and--infinity\"\n  }), \"Infinity and -Infinity\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#number-constants\"\n  }), \"Number constants\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#comments\"\n  }), \"Comments\"))), mdx(\"h1\", null, \"Reading the document\"), mdx(\"h1\", null, \"Important Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Latest Publish version of ECMAScript: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://262.ecma-international.org/\"\n  }), \"https://262.ecma-international.org/\"), \" \")), mdx(\"h1\", null, \"Major Reference\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://goalkicker.com/JavaScriptBook/\"\n  }), \"https://goalkicker.com/JavaScriptBook/\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"\n  }), \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"), \" \")), mdx(\"h1\", null, \"Console\"), mdx(\"h2\", null, \"console.log()\"), mdx(\"p\", null, \"All modern web browsers, Node.js as well as almost every other JavaScript environment support writing messages to a console using a suite of logging methods. The most common of these methods is console.log(). In a browser environment, the console.log() function is predominantly used for debugging purposes.\"), mdx(\"h3\", null, \"Getting Started\"), mdx(\"p\", null, \"Open up the JavaScript Console in your browser, type the following, and press Enter :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"console.log(\\\"Hello, World!\\\");\\nHello, World!\\nundefined\\n\")), mdx(\"p\", null, \"the function prints Hello, World! to the console and returns undefined. This is because console.log() has no explicit return value.\"), mdx(\"h3\", null, \"Logging variables\"), mdx(\"p\", null, \"console.log() can be used to log variables of any kind; not only strings. Just pass in the variable that you want to be displayed in the console, for example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var thisVar = 'first value';\\nvar thatVar = 'second value';\\nconsole.log(\\\"thisVar:\\\", thisVar, \\\"and thatVar:\\\", thatVar);\\nthisVar: first value and thatVar: second value\\nundefined\\n\")), mdx(\"p\", null, \"If you want to log two or more values, simply separate them with commas. Spaces will be automatically added between each argument during concatenation.\"), mdx(\"h3\", null, \"Placeholders\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"console.log() can be used in combination with placeholders:\\nvar greet = \\\"Hello\\\", who = \\\"World\\\";\\nconsole.log(\\\"%s, %s!\\\", greet, who);\\nHello, World!\\nundefined\\n\")), mdx(\"h3\", null, \"Logging Objects\"), mdx(\"p\", null, \"Below we see the result of logging an object. This is often useful for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"logging JSON responses\"), \" from API calls.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"console.log({\\n'Email': '',\\n'Groups': {},\\n'Id': 33,\\n'IsHiddenInUI': false,\\n'IsSiteAdmin': false,\\n'LoginName': 'i:0\\\\#.w\\\\|virtualdomain\\\\\\\\\\\\\\\\user2',\\n'PrincipalType': 1,\\n'Title': 'user2'\\n});\\n\\n{Email: \\\"\\\", Groups: {...}, Id: 33, IsHiddenInUI: false, IsSiteAdmin: false, ...}\\n\\nEmail: \\\"\\\"Groups: {}__proto__: Objectconstructor: \\u0192 Object()hasOwnProperty: \\u0192 hasOwnProperty()isPrototypeOf: \\u0192 isPrototypeOf()propertyIsEnumerable: \\u0192 propertyIsEnumerable()toLocaleString: \\u0192 toLocaleString()toString: \\u0192 toString()valueOf: \\u0192 valueOf()__defineGetter__: \\u0192 __defineGetter__()__defineSetter__: \\u0192 __defineSetter__()__lookupGetter__: \\u0192 __lookupGetter__()__lookupSetter__: \\u0192 __lookupSetter__()get __proto__: \\u0192 __proto__()set __proto__: \\u0192 __proto__()Id: 33IsHiddenInUI: falseIsSiteAdmin: falseLoginName: \\\"i:0\\\\#.w\\\\|virtualdomain\\\\\\\\user2\\\"PrincipalType: 1Title: \\\"user2\\\"__proto__: Objectconstructor: \\u0192 Object()hasOwnProperty: \\u0192 hasOwnProperty()isPrototypeOf: \\u0192 isPrototypeOf()propertyIsEnumerable: \\u0192 propertyIsEnumerable()toLocaleString: \\u0192 toLocaleString()toString: \\u0192 toString()valueOf: \\u0192 valueOf()__defineGetter__: \\u0192 __defineGetter__()__defineSetter__: \\u0192 __defineSetter__()__lookupGetter__: \\u0192 __lookupGetter__()__lookupSetter__: \\u0192 __lookupSetter__()get __proto__: \\u0192 __proto__()set __proto__: \\u0192 __proto__()\\n\\nundefined\\n\")), mdx(\"h3\", null, \"Logging HTML elements\"), mdx(\"p\", null, \"You have the ability to log any element which exists within the DOM. In this case we log the body element:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"console.log(document.body);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<body>\\u200B<div id=\\u200B\\\"root\\\" style=\\u200B\\\"--ntp-extra-content-effect-multiplier:\\u200B0;\\u200B --ntp-fixed-content-height:\\u200B0px;\\u200B\\\">\\u200B...\\u200B</div>\\u200B</body>\\u200B\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"undefined\\n\")), mdx(\"h1\", null, \"Using the DOM API\"), mdx(\"p\", null, \"DOM stands for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Document Object Model\"), \". It is an object-oriented representation of structured documents like XML and HTML\"), mdx(\"p\", null, \"JavaScript can be used to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"create a new HTML element programmatically\"), \". For example, consider an HTML document with the following body:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<body>\\n<h1>Adding an element</h1>\\n</body>\\n\")), mdx(\"p\", null, \"In our JavaScript, we create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<p>\"), \" tag with a textContent property of and add it at the end of the html body:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var element = document.createElement('p');\\nelement.textContent = \\\"Hello, World\\\"; document.body.appendChild(element); //add the newly created element to the DOM\\n\")), mdx(\"p\", null, \"That will change your HTML body to the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<body>\\n<h1>Adding an element</h1>\\n<p>Hello, World</p>\\n</body>\\n\")), mdx(\"p\", null, \"To manipulate elements in the DOM using JavaScript, the JavaScript code must be run after the relevant element has been created in the document\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"putting the JavaScript \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<script>\"), \" tags after all of your other \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<body>\"), \" content.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use an event listener to listen to eg. \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload\"\n  }), \"window's onload\"), \" event, adding your code to that \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\"\n  }), \"event listener\"), \" will delay running your code until after the whole content on your page has been loaded.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful\"\n  }), \"To wrap the DOM manipulation code with a timeout function of 0 ms\"), \". JavaScript code is re-queued at the end of the execution queue\")), mdx(\"h1\", null, \"Window\"), mdx(\"p\", null, \"All \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"window properties are automatically global variables\"), \", we can use alert as a global variable instead of as a property of window.\"), mdx(\"h2\", null, \"Alert\"), mdx(\"p\", null, \"The alert method displays a visual alert box on screen. The alert method parameter is displayed to the user in plain text:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"window.alert(message); or alert(message); => alert(\\\"Hi\\\")\\n\")), mdx(\"p\", null, \"Alert acts as a modal prompt meaning that the code calling alert will pause until the prompt is answered. Traditionally this means that no other JavaScript code will execute until the alert is dismissed. However the specification actually allows other event-triggered code to continue to execute even though a modal dialog is still being shown. In such implementations, it is possible for other code to run while the modal dialog is being shown.\"), mdx(\"h2\", null, \"Prompt\"), mdx(\"p\", null, \"An easy way to get an input from a user is by using the prompt() method.\"), mdx(\"p\", null, \"Syntax prompt(text, \", \"[default]\", \");\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"text: The text displayed in the prompt box.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"default: A default value for the input field (optional).\")), mdx(\"p\", null, \"Examples\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var age = prompt(\\\"How old are you?\\\");\\nconsole.log(age); // Prints the value inserted by the user\\n\")), mdx(\"p\", null, \"If the user clicks the OK button, the input value is returned. Otherwise, the method returns null.\"), mdx(\"h2\", null, \"Confirm\"), mdx(\"p\", null, \"The window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel. Now, let's take the following example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"result = window.confirm(message);\\n\")), mdx(\"p\", null, \"Here, message is the optional string to be displayed in the dialog and result is a boolean value indicating whether OK or Cancel was selected (true means OK). \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.confirm()\"), \" is typically used to ask for user confirmation before doing a dangerous operation like deleting something in a Control Panel.\"), mdx(\"h1\", null, \"JavaScript Variables\"), mdx(\"p\", null, \"Syntax: var variable_name = value\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"variable_name {Required} The name of the variable: used when calling it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"= Optional Assignment (defining the variable)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"value {Required when using Assignment} The value of a variable \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"default: undefined\"))), mdx(\"h2\", null, \"Types of Variables\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var myInteger = 12; // 32-bit number (from -2,147,483,648 to 2,147,483,647)\\nvar myLong = 9310141419482; // 64-bit number (from -9,223,372,036,854,775,808 to 9223,372,036,854,775,807)\\nvar myFloat = 5.5; // 32-bit floating-point number (decimal)\\nvar myDouble = 9310141419482.22; // 64-bit floating-point number\\nvar myBoolean = true; // 1-bit true/false (0 or 1)\\nvar myBoolean2 = false;\\nvar myNotANumber = NaN;\\nvar NaN_Example = 0/0; // NaN: Division by Zero is not possible\\nvar notDefined; // undefined: we didn't define it to anything yet\\nwindow.alert(aRandomVariable); // undefined\\nvar myNull = null; // null // etc\\\\...\\n\")), mdx(\"h2\", null, \"Arrays and Objects\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var myArray = []; // empty array\\n\")), mdx(\"p\", null, \"An array is a set of variables. For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var favoriteFruits = [\\\"apple\\\", \\\"orange\\\", \\\"strawberry\\\"];\\nvar carsInParkingLot = [\\\"Toyota\\\", \\\"Ferrari\\\", \\\"Lexus\\\"];\\nvar employees = [\\\"Billy\\\", \\\"Bob\\\", \\\"Joe\\\"];\\nvar primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31];\\nvar randomVariables = [2, \\\"any type works\\\", undefined, null, true, 2.51];\\nmyArray = [\\\"zero\\\", \\\"one\\\", \\\"two\\\"];\\nwindow.alert(myArray[0]); // 0 is the first element of an array in this case, the value would be \\\"zero\\\"\\nmyArray = [\\\"John Doe\\\", \\\"Billy\\\"];\\nelementNumber = 1;\\nwindow.alert(myArray[elementNumber]); // Billy\\n\")), mdx(\"p\", null, \"An object is a group of values; unlike arrays, we can do something better than them:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"myObject = {};\\njohn = {firstname: \\\"John\\\", lastname: \\\"Doe\\\", fullname: \\\"John Doe\\\"};\\nbilly = {\\nfirstname: \\\"Billy\\\",\\nlastname: undefined,\\nfullname: \\\"Billy\\\"\\n};\\nwindow.alert(john.fullname); // John Doe\\nwindow.alert(billy.firstname); // Billy\\n\")), mdx(\"p\", null, \"Rather than making an array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\\\"John Doe\\\", \\\"Billy\\\"]\"), \" and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myArray[0]\"), \", we can just call john.fullname and billy.fullname.\"), mdx(\"h1\", null, \"Built-in Constants\"), mdx(\"h2\", null, \"null\"), mdx(\"p\", null, \"null is used for representing the intentional absence of an object value and is a primitive value. Unlike undefined, it is not a property of the global object.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is equal to undefined but not identical to it.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"null == undefined; // true\\nnull === undefined; // false\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The typeof null is 'object'.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To properly check if a value is null, compare it with the strict equality operator\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var a = null;\\na === null; // true\\n\")), mdx(\"h2\", null, \"Nan\"), mdx(\"p\", null, \"NaN stands for \\\"Not a Number.\\\" When a mathematical function or operation in JavaScript cannot return a specific number, it returns the value NaN instead.\"), mdx(\"p\", null, \"It is a property of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"global object\"), \", and a reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.NaN\")), mdx(\"p\", null, \"Perhaps confusingly, NaN is still considered a number.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"typeof NaN; // 'number'\\n\")), mdx(\"p\", null, \"Don't check for NaN using the equality operator\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"NaN == NaN // false\\nNaN === NaN // false\\n\")), mdx(\"h3\", null, \"Testing for NaN using isNaN()\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"window.isNaN()\\n\")), mdx(\"p\", null, \"The global function isNaN() can be used to check if a certain value or expression evaluates to NaN. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This function (in short) first checks if the value is a number, if not tries to convert it (*), and then checks if the resulting value is NaN\"), \". For this reason, this testing method may cause confusion.\"), mdx(\"p\", null, \"Examples\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"isNaN(NaN); // true\\nisNaN(1); // false: 1 is a number\\nisNaN(-2e-4); // false: -2e-4 is a number (-0.0002) in scientific notation\\nisNaN(Infinity); // false: Infinity is a number\\nisNaN(true); // false: converted to 1, which is a number\\nisNaN(false); // false: converted to 0, which is a number\\nisNaN(null); // false: converted to 0, which is a number\\nisNaN(\\\"\\\"); // false: converted to 0, which is a number\\nisNaN(\\\" \\\"); // false: converted to 0, which is a number\\nisNaN(\\\"45.3\\\"); // false: string representing a number, converted to 45.3\\nisNaN(\\\"1.2e3\\\"); // false: string representing a number, converted to 1.2e3\\nisNaN(\\\"Infinity\\\"); // false: string representing a number, converted to Infinity\\nisNaN(new Date); // false: Date object, converted to milliseconds since epoch\\nisNaN(\\\"10$\\\"); // true : conversion fails, the dollar sign is not a digit\\nisNaN(\\\"hello\\\"); // true : conversion fails, no digits at all\\nisNaN(undefined); // true : converted to NaN\\nisNaN(); // true : converted to NaN (implicitly undefined)\\nisNaN(function(){}); // true : conversion fails\\nisNaN({}); // true : conversion fails\\nisNaN([1, 2]); // true : converted to \\\"1, 2\\\", which can't be converted to a number\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"An array is considered NaN by isNaN() unless it only holds one element whose string representation can be converted to a valid number.\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.isNan()\"), \" doesn't try to convert the value to a number before testing. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"Version \\u2265 6\\nNumber.isNaN()\\n\")), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.isNaN\"), \" is called with one argument number, the following steps are taken:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If Type(number) is not Number, return false.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If number is NaN, return true. // the only true scenario\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Otherwise, return false.\")), mdx(\"h3\", null, \"Operations that return NaN\"), mdx(\"p\", null, \"Mathematical operations on values other than numbers return NaN.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"b\\\" * 3\\n\\\"cde\\\" - \\\"e\\\"\\n[1, 2, 3] * 2\\n\")), mdx(\"p\", null, \"An exception: Single-number arrays.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"[2] * [3] // Returns 6\\n\")), mdx(\"p\", null, \"Also, remember that the + operator concatenates strings.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"a\\\" + \\\"b\\\" // Returns \\\"ab\\\"\\n\")), mdx(\"p\", null, \"Dividing zero by zero returns NaN.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"0 / 0 // NaN\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: In mathematics generally (unlike in JavaScript programming), dividing by zero is not possible.\")), mdx(\"h2\", null, \"undefined and null\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"absence of a value in the compiler\"), \", because where it should be a value, there hasn't been put one, like the case of an unassigned variable.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"undefined is a global value that represents the absence of an assigned value.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"typeof undefined === 'undefined'\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"null is an object that indicates that a variable has been explicitly assigned \\\"no value\\\".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"typeof null === 'object'\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Setting a variable to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" means the variable effectively does not exist. Some processes, such as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JSON serialization, may strip undefined properties from objects\"), \". In contrast, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" properties indicate will be preserved so you can \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"explicitly convey the concept of an \\\"empty\\\" property\"), \".\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" is also a property of the global window object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// Only in browsers\\nconsole.log(window.undefined); // undefined\\nwindow.hasOwnProperty('undefined'); // true\\n\")), mdx(\"p\", null, \"The following evaluate to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A variable when it is declared but not assigned a value (i.e. not defined)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let foo;\\nconsole.log('is undefined?', foo === undefined);\\n// is undefined? true\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accessing the value of a property that doesn't exist\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let foo = { a: 'a' };\\nconsole.log('is undefined?', foo.b === undefined);\\n// is undefined? true\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The return value of a function that doesn't return a value\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function foo() { return; }\\nconsole.log('is undefined?', foo() === undefined);\\n// is undefined? true\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The value of a function argument that is declared but has been omitted from the function call\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function foo(param) {\\n console.log('is undefined?', param === undefined);\\n}\\nfoo('a');\\nfoo();\\n// is undefined? false\\n// is undefined? trueThe following evaluate to undefined:\\n\")), mdx(\"h2\", null, \"Infinity and -Infinity\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Infinity\"), \" is a property of the global object (therefore a global variable) that represents mathematical infinity. It is a reference to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.POSITIVE_INFINITY\"), \", Similarly \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-Infinity\"), \" referes to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.NEGATIVE_INFINITY\"), \" \"), mdx(\"p\", null, \" Evaluating the expression of a number that's so big that overflows, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.MAX_VALUE\"), \" actually means there is no division by 0 errors in JavaScript, there is Infinity!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \">=ES6 //use \\nNumber.MIN_SAFE_INTEGER;\\nNumber.MAX_SAFE_INTEGER;\\n\")), mdx(\"h2\", null, \"Number constants\"), mdx(\"p\", null, \"The Number constructor has some built in constants that can be useful\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"Number.MAX_VALUE; // 1.7976931348623157e+308\\nNumber.MAX_SAFE_INTEGER; // 9007199254740991\\nGoalKicker.com \\u2013 JavaScript\\xAE Notes for Professionals 16\\nNumber.MIN_VALUE; // 5e-324\\nNumber.MIN_SAFE_INTEGER; // -9007199254740991\\nNumber.EPSILON; // 0.0000000000000002220446049250313\\nNumber.POSITIVE_INFINITY; // Infinity\\nNumber.NEGATIVE_INFINITY; // -Infinity\\nNumber.NaN; // NaN\\n\")), mdx(\"p\", null, \"In many cases the various operators in JavaScript will break with values outside the range of (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.MIN_SAFE_INTEGER\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.MAX_SAFE_INTEGER\"), \")\\nNote that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Number.EPSILON\"), \" represents the  \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"difference between one and the smallest Number greater than one, and thus the smallest possible difference between two different \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"Number\"), \" values\"), \". One reason to use this is due to the nature of how numbers are stored by JavaScript.\"), mdx(\"h1\", null, \"Comments\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/javascript/"}},"staticQueryHashes":["4080856488"]}